kill(all);

load("grobner");
poly_monomial_order:lex;


/*  */
grau(f,x):=hipow(f,x);
multiplicidade(f):=part(f,2);

/*  */
coef_lider(f,x):=coeff(f,x,grau(f,x));
termo_lider(f,x):=coeff(f,x,grau(f,x))*x^(grau(f,x));
termo_grau(f,x,gr):=coeff(f,x,gr)*x^gr;
GetFator_semMultiplicidade(f):=part(f,1);

radical_g(g,x):=block(
	[gdiff,d,f],
	gdiff:diff(g,x),
	d:gcd(g,gdiff),	f:quotient(g,d,x),
	return(f)
);

/* */
fatoracao_livreQuadrados(f):=sqfr(f);
lfatores_livresQuadrados(f):=args(sqfr(f));
getMax_multiplicidade(lpoly):=block(
	[maxm],
	maxm:multiplicidade(lpoly[1]),
	for i:1 thru length(lpoly) do (
		mtmp:multiplicidade(lpoly[i]),
		if (mtmp > maxm) then
			maxm:mtmp
	),
	return(maxm)
);
getFator_multiplicidade(lpoly,j):=block(
	[FIND],	FIND:0,
	for i:1 thru length(lpoly) do (
		if is(multiplicidade(lpoly[i]) = j) then FIND:i
	),
	if is(FIND=0) then return(1)
	else return(GetFator_semMultiplicidade(lpoly[FIND]))
);

/* Algoritmo Euclideano Estendido para polinômios
   Entrada: polinômios f,g in Q[x]
   Saída: Uma lista com três elementos, contendo
	[mdc(f,g), a1, b1] tais que
		a1*f + b1*g = mdc(f,g)
*/
Euclideano_Estendido(f,g,x):=block(
	[a1, a2, b1, b2, D, d, Atmp, Btmp],

	/* Inicialização dos valores iniciais */
	a1:1, a2: 0,
	b1:0, b2: 1,
	D:f,d:g,

	/* Impressão das duas primeiras linhas da tabela */
	/*
	print("Tabela Euclideano Extendido para: ", f, " e ", g),
	print(" R: ", f, " Q: **", " A0: ", a1, " B0: ", b1),
	print(" R: ", g, " Q: **", " A1: ", a2, " B1: ", b2),
	*/
	for i: 1 while (d # 0) do (
		/* Impressão da tabela */
		/*print(" R: ", r ," Q: ", q, " A: ", a1, " B: ", b1), */
		div:divide(D,d,x),
		q:div[1], r:div[2],

		/* Atualização dos coefs */
		Atmp:a1-q*a2,
		a1:a2, 	a2:Atmp,

		Btmp:b1-q*b2,
		b1:b2, b2:Btmp,

		D:d,d:r

),
	return([D,expand(a1),expand(b1)])
);

DioEuclides_Estendido(a,b,c,x):=block(
	[s,t,g,Euclides_ext,D,q,r],
	Euclides_ext:Euclideano_Estendido(a,b,x),
	s:Euclides_ext[2], t:Euclides_ext[3], g:Euclides_ext[1],
	D:divide(c,g,x),
	q:D[1], r:D[2],

	if (r # 0) then (
		print("c is not in the ideal generated by a and b")
	),
	s:q*s, t:q*t,
	if (s # 0 and grau(s,x) >= grau(b,x) ) then (
		D:divide(c,g,x),
		q:D[1], r:[2],
		s:r, t:t+q*a
	),
	return ([s,t])
);


hermite(f,x):=block(
	[N,D,R,Dsqfr,j,L,V,Vf,U,Vdiff,UVdiff],
	[Euclides_ext,A,B,Q,Alpha,AlphaDiff,Beta],
	[r,Rnum,Rdenom],

	R:0, N:num(f), D:denom(f),
	Dsqfr:fatoracao_livreQuadrados(D),
	L:lfatores_livresQuadrados(D),
	j:getMax_multiplicidade(L),

	V:1,


	while (j > 1) do (
		if (grau(getFator_multiplicidade(L,j),x) > 0) then (
			V:V*getFator_multiplicidade(L,j),
			U:fatoracao_livreQuadrados(quotient(D,V^j,x)),
			Vdiff:diff(V,x), UVdiff:U*Vdiff,

			Vf:getFator_multiplicidade(L,j),

			Euclides_ext:Euclideano_Estendido(UVdiff,V,x),
			A:Euclides_ext[2], B:Euclides_ext[3],
			Q:quotient(N*A,V),

			Alpha:N*A-Q*V,
			Beta:N*B+Q*UVdiff,

			r:Alpha/(j-1),

			R:R-r/Vf^(j-1),
			Rnum:num(R),
			Rdenom:denom(R),

			AlphaDiff:diff(Alpha,x),

			N:AlphaDiff*U+(j-1)*Beta,

			N:N/(j-1),
			D:U*V^(j-1),

			print("J: ", j, " V : ", V, " U : ", U, " UV': ", UVdiff),
			print(" A: ", expand(A), " B : ", expand(B), " Alpha : ", expand(Alpha), " Beta : ", expand(Beta)),
				print(" Num R: ", Rnum, "Denom R : ", Rdenom),
/* 				print(" R: ", expand(R)), */
			print(" N : ", expand(N), " D : ", D)

		),
		j:j-1
	),
	return([expand(N),D])
);

hermite_reduce(f,x):=block(
	[N,D,R,L,m,i,j],
	[V,U,dV,UdV],
	[Euclides_ext,A,B,dA],
	R:0, N:num(f), D:denom(f),
	L:lfatores_livresQuadrados(D),
	m:getMax_multiplicidade(L),
	for i:2 thru m do (
		if ( grau( getFator_multiplicidade(L,i),x ) > 0 ) then (
			V:getFator_multiplicidade(L,i),
			dV:expand(diff(V,x)),
			U:expand(fullratsimp(D/V^i)),
			UdV:expand(U*dV),

			for j:i-1 thru 1 step -1 do (
				EuclidesDio:DioEuclides_Estendido(UdV,V,-expand(fullratsimp(N/j)),x),
				A:EuclidesDio[1], B:EuclidesDio[2], dA:diff(A,x),
				R:R+fullratsimp(A/V^j), N:expand(fullratsimp(-j*B-U*dA)),
				print(" i : ", i, " V : ", V, " U : ", U, " j : ", j, " N: ", N, " A : ", A, " B : ", B)
			)
		),
		D:U*V

	),
	return([R,fullratsimp(N),D])
);


czichowski(N,D,x):=block(
	[I,Ddiff,G,p,L,j,b],
	Ddiff:diff(D,x),
	I:[D,N-y*Ddiff],
	G:poly_reduced_grobner(I,[x,y]),
	p:G[1],
	L:[],j:length(G)-1,b:1
	/*
	while (j>1) do (



	)
	*/



);
